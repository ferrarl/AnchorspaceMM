package actions

import (
	"bytes"
	"fmt"
	"image"
	"image/jpeg"
	"image/png"
	"log"
	"strings"

	"github.com/disintegration/gift"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/buffalo/binding"
	"github.com/gobuffalo/envy"
	"github.com/gobuffalo/pop"
	"github.com/gobuffalo/uuid"
	"github.com/minio/minio-go"
	"github.com/pkg/errors"
	"mmgitl.mattclark.guru/Anchorspace/dashboard/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Listing)
// DB Table: Plural (listings)
// Resource: Plural (Listings)
// Path: Plural (/listings)
// View Template Folder: Plural (/templates/listings/)

// ListingsResource is the resource for the Listing model
type ListingsResource struct {
	buffalo.Resource
}

// List gets all Listings. This function is mapped to the path
// GET /listings
func (v ListingsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	listings := &models.Listings{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	if nid := c.Param("NeighborhoodID"); strings.TrimSpace(nid) != "" {
		q.Where("listings.neighborhood_id = ?", nid)
		c.Set("selected_neighborhood_id", nid)
	} else {
		c.Set("selected_neighborhood_id", "")
	}

	// Retrieve all Listings from the DB
	if err := q.Eager().All(listings); err != nil {
		return errors.WithStack(err)
	}

	neighborhoods := models.Neighborhoods{}
	if err := tx.All(&neighborhoods); err != nil {
		return errors.WithStack(err)
	}
	nmap := map[string]string{}
	nmap["Select neighborhood here"] = ""
	for _, n := range neighborhoods {
		nmap[n.Name] = n.ID.String()
	}
	c.Set("neighborhoods", nmap)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, listings))
}

// Show gets the data for one Listing. This function is mapped to
// the path GET /listings/{listing_id}
func (v ListingsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Listing
	listing := &models.Listing{}

	// To find the Listing the parameter listing_id is used.
	if err := tx.Eager().Eager("ShowRequests.User").Find(listing, c.Param("listing_id")); err != nil {
		return c.Error(404, err)
	}

	showRequest := &models.ShowRequest{}
	c.Set("showRequest", showRequest)

	return c.Render(200, r.Auto(c, listing))
}

// New renders the form for creating a new Listing.
// This function is mapped to the path GET /listings/new
func (v ListingsResource) New(c buffalo.Context) error {
	current_user := c.Value("current_user").(*models.User)
	if !current_user.IsAdmin && !current_user.IsAgent {
		c.Flash().Add("danger", "You don't have access to that!")
		return c.Render(404, r.HTML("index.html"))
	}
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	if err := v.SetupForms(c, tx); err != nil {
		return errors.WithStack(err)
	}

	return c.Render(200, r.Auto(c, &models.Listing{}))
}

// Create adds a Listing to the DB. This function is mapped to the
// path POST /listings
func (v ListingsResource) Create(c buffalo.Context) error {
	var url string
	if strings.Contains(c.Request().Header.Get("Content-Type"), "multipart/form-data") {
		f, err := c.File("PrimaryImageFile")
		if err != nil {
			return errors.WithStack(err)
		}

		if f.Valid() && f.File != nil && f.Filename != "" {
			url, err = uploadFile(f)
			if err != nil {
				return errors.WithStack(err)
			}
		}
	}

	current_user := c.Value("current_user").(*models.User)
	if !current_user.IsAdmin && !current_user.IsAgent {
		c.Flash().Add("danger", "You don't have access to that!")
		return c.Render(404, r.HTML("index.html"))

	}
	// Allocate an empty Listing
	listing := &models.Listing{}

	// Bind listing to the html form elements
	if err := c.Bind(listing); err != nil {
		log.Println("Error binding listing in POST:", err)
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	if err := v.SetupForms(c, tx); err != nil {
		log.Println("Error Setting up forms listings in POST:", err)
		return errors.WithStack(err)
	}

	if current_user.IsAgent {
		listing.ListerID = current_user.ID
	}

	if url != "" {
		listing.PictureUrl = url
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(listing)
	if err != nil {
		log.Println("Error Creating listings in POST:", err)
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, listing))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Listing was created successfully")

	tx.Load(listing)

	// and redirect to the listings index page
	return c.Render(201, r.Auto(c, listing))
}

// Edit renders a edit form for a Listing. This function is
// mapped to the path GET /listings/{listing_id}/edit
func (v ListingsResource) Edit(c buffalo.Context) error {
	current_user := c.Value("current_user").(*models.User)
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	if err := v.SetupForms(c, tx); err != nil {
		return errors.WithStack(err)
	}

	// Allocate an empty Listing
	listing := &models.Listing{}

	if err := tx.Eager().Find(listing, c.Param("listing_id")); err != nil {
		return c.Error(404, err)
	}

	if (!current_user.IsAdmin && !current_user.IsAgent) || (current_user.IsAgent && listing.ListerID != current_user.ID) {
		c.Flash().Add("danger", "You don't have access to that!")
		return c.Render(404, r.HTML("index.html"))

	}

	return c.Render(200, r.Auto(c, listing))
}

// Update changes a Listing in the DB. This function is mapped to
// the path PUT /listings/{listing_id}
func (v ListingsResource) Update(c buffalo.Context) error {
	var url string

	if strings.Contains(c.Request().Header.Get("Content-Type"), "multipart/form-data") {
		f, err := c.File("PrimaryImageFile")
		if err != nil {
			fmt.Println(err)
			return errors.WithStack(err)
		}

		if f.Valid() && f.File != nil && f.Filename != "" {
			url, err = uploadFile(f)
			if err != nil {
				return errors.WithStack(err)
			}
		}
	}

	current_user := c.Value("current_user").(*models.User)
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	if err := v.SetupForms(c, tx); err != nil {
		return errors.WithStack(err)
	}

	// Allocate an empty Listing
	listing := &models.Listing{}

	if err := tx.Find(listing, c.Param("listing_id")); err != nil {
		return c.Error(404, err)
	}

	if (!current_user.IsAdmin && !current_user.IsAgent) || (current_user.IsAgent && listing.ListerID != current_user.ID) {
		c.Flash().Add("danger", "You don't have access to that!")
		return c.Render(404, r.HTML("index.html"))
	}

	listerID := listing.ListerID

	// Bind Listing to the html form elements
	if err := c.Bind(listing); err != nil {
		return errors.WithStack(err)
	}

	if url != "" {
		listing.PictureUrl = url
	}

	listing.ListerID = listerID

	fmt.Printf("==================================\n%+v\n=====================================\n", listing)

	verrs, err := tx.Eager().ValidateAndUpdate(listing)
	if err != nil {
		return errors.WithStack(err)
	}

	tx.Load(listing)

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, listing))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Listing was updated successfully")

	// and redirect to the listings index page
	return c.Render(200, r.Auto(c, listing))
}

// Destroy deletes a Listing from the DB. This function is mapped
// to the path DELETE /listings/{listing_id}
func (v ListingsResource) Destroy(c buffalo.Context) error {
	current_user := c.Value("current_user").(*models.User)

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Listing
	listing := &models.Listing{}

	// To find the Listing the parameter listing_id is used.
	if err := tx.Find(listing, c.Param("listing_id")); err != nil {
		return c.Error(404, err)
	}

	if (!current_user.IsAdmin && !current_user.IsAgent) || (current_user.IsAgent && listing.ListerID != current_user.ID) {
		c.Flash().Add("danger", "You don't have access to that!")
		return c.Render(404, r.HTML("index.html"))

	}

	if err := tx.Destroy(listing); err != nil {
		return errors.WithStack(err)
	}

	if err := tx.RawQuery("delete from listings_uses where listing_id = ?", listing.ID).Exec(); err != nil {
		return errors.WithStack(err)
	}

	if err := tx.RawQuery("delete from listings_terms where listing_id = ?", listing.ID).Exec(); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Listing was destroyed successfully")

	// Redirect to the listings index page
	return c.Render(200, r.Auto(c, listing))
}

func (v ListingsResource) SetupForms(c buffalo.Context, tx *pop.Connection) error {
	//Set up neighborhood options
	neighborhoods := models.Neighborhoods{}
	if err := tx.All(&neighborhoods); err != nil {
		return err
	}
	nmap := map[string]uuid.UUID{}
	for _, n := range neighborhoods {
		nmap[n.Name] = n.ID
	}
	c.Set("neighborhoods", nmap)

	//Set up Agent options
	agents := models.Users{}
	if err := tx.Where("is_agent = True").All(&agents); err != nil {
		return err
	}
	amap := map[string]uuid.UUID{}
	for _, n := range agents {
		amap[n.Name()] = n.ID
	}
	c.Set("agents", amap)

	//Set up Use options
	uses := models.Uses{}
	if err := tx.All(&uses); err != nil {
		return err
	}
	umap := map[string]models.Use{}
	for _, u := range uses {
		umap[u.Name] = u
	}
	c.Set("uses", umap)

	//Set up Term options
	terms := models.Terms{}
	if err := tx.All(&terms); err != nil {
		return err
	}
	tmap := map[string]models.Term{}
	for _, term := range terms {
		tmap[term.Name] = term
	}
	c.Set("terms", tmap)

	return nil
}

func uploadFile(file binding.File) (string, error) {
	// get the file extension for a file, or else
	fileParts := strings.Split(file.Filename, ".")
	fileExt := fileParts[len(fileParts)-1]
	if fileExt != "jpg" && fileExt != "jpeg" && fileExt != "png" {
		return "", errors.New("invalid file extension used on submitted image")
	}

	ssl := true
	endpoint := "nyc3.digitaloceanspaces.com"
	key := envy.Get("SPACES_KEY", "")
	secret := envy.Get("SPACES_SECRET", "")
	bucket := envy.Get("BUCKET_NAME", "")

	// validate presence of env vars
	if key == "" || secret == "" || bucket == "" {
		return "", errors.New("environment vars not set properly for uploading files")
	}

	// setup minio client
	minioClient, err := minio.New(endpoint, key, secret, ssl)
	if err != nil {
		return "", err
	}

	// verify that expected bucket exists
	exists, err := minioClient.BucketExists(bucket)
	if err != nil {
		return "", err
	}
	if !exists {
		return "", errors.New("specified bucket does not exist")
	}

	img, err := decodeImage(file, fileExt == "png")
	if err != nil {
		return "", err
	}

	imgBuf, err := resizeImage(img)
	if err != nil {
		return "", err
	}

	upload := bytes.NewReader(imgBuf.Bytes())

	// get new uuid filename
	filename, err := uuid.NewV4()
	if err != nil {
		return "", err
	}

	uploadLoc := filename.String() + ".jpg"

	options := minio.PutObjectOptions{
		ContentType:  "image/jpeg",
		UserMetadata: map[string]string{"X-Amz-Acl": "public-read"},
	}

	// do that upload thing
	if _, err = minioClient.PutObject(bucket, uploadLoc, upload, int64(imgBuf.Len()), options); err != nil {
		return "", err
	}

	// build url
	url := "https://" + bucket + "." + endpoint + "/" + uploadLoc

	return url, nil
}

func decodeImage(file binding.File, isPng bool) (image.Image, error) {
	var img image.Image
	var err error
	if isPng {
		img, err = png.Decode(file)
	} else {
		img, err = jpeg.Decode(file)
	}
	file.Close()
	return img, err
}

func resizeImage(img image.Image) (*bytes.Buffer, error) {
	buf := new(bytes.Buffer)

	// setup resize action/params
	g := gift.New(gift.ResizeToFill(700, 350, gift.LanczosResampling, gift.CenterAnchor))

	// make a destination
	dst := image.NewNRGBA(g.Bounds(img.Bounds()))
	// RESIZE!
	g.Draw(dst, img)

	err := jpeg.Encode(buf, dst, nil)
	return buf, err
}
