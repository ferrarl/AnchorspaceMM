package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
	"mmgitl.mattclark.guru/Anchorspace/dashboard/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (ShowRequest)
// DB Table: Plural (show_requests)
// Resource: Plural (ShowRequests)
// Path: Plural (/show_requests)
// View Template Folder: Plural (/templates/show_requests/)

// ShowRequestsResource is the resource for the ShowRequest model
type ShowRequestsResource struct {
	buffalo.Resource
}

// List gets all ShowRequests. This function is mapped to the path
// GET /show_requests
func (v ShowRequestsResource) List(c buffalo.Context) error {
	current_user := c.Value("current_user").(*models.User)
	if !current_user.IsAdmin && !current_user.IsAgent {
		c.Flash().Add("danger", "You don't have access to that!")
		return c.Render(404, r.HTML("index.html"))
	}
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	showRequests := &models.ShowRequests{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	if current_user.IsAgent {
		q.Where("listing_id in (select id from listings where user_id = ?)", current_user.ID)
	}

	// Retrieve all ShowRequests from the DB
	if err := q.Eager().Eager("Listing.Lister").All(showRequests); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, showRequests))
}

// Show gets the data for one ShowRequest. This function is mapped to
// the path GET /show_requests/{show_request_id}
func (v ShowRequestsResource) Show(c buffalo.Context) error {
	return c.Redirect(301, "/")
}

// New renders the form for creating a new ShowRequest.
// This function is mapped to the path GET /show_requests/new
func (v ShowRequestsResource) New(c buffalo.Context) error {
	return c.Redirect(301, "/")
}

// Create adds a ShowRequest to the DB. This function is mapped to the
// path POST /show_requests
func (v ShowRequestsResource) Create(c buffalo.Context) error {
	current_user := c.Value("current_user").(*models.User)
	// Allocate an empty ShowRequest
	showRequest := &models.ShowRequest{}

	// Bind showRequest to the html form elements
	if err := c.Bind(showRequest); err != nil {
		return errors.WithStack(err)
	}

	showRequest.UserID = current_user.ID

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(showRequest)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, showRequest))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "ShowRequest was created successfully")

	print("good to go!", showRequest.ListingID.String())
	// and redirect to the show_requests index page
	return c.Render(201, r.Auto(c, showRequest))
}

// Edit renders a edit form for a ShowRequest. This function is
// mapped to the path GET /show_requests/{show_request_id}/edit
func (v ShowRequestsResource) Edit(c buffalo.Context) error {
	current_user := c.Value("current_user").(*models.User)
	if !current_user.IsAdmin && !current_user.IsAgent {
		c.Flash().Add("danger", "You don't have access to that!")
		return c.Render(404, r.HTML("index.html"))
	}
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty ShowRequest
	showRequest := &models.ShowRequest{}

	if err := tx.Eager().Find(showRequest, c.Param("show_request_id")); err != nil {
		return c.Error(404, err)
	}

	if !current_user.IsAdmin && current_user.IsAgent && showRequest.Listing.ListerID != current_user.ID {
		return c.Error(404, errors.New("You do not have permissions to do this."))
	}

	return c.Render(200, r.Auto(c, showRequest))
}

// Update changes a ShowRequest in the DB. This function is mapped to
// the path PUT /show_requests/{show_request_id}
func (v ShowRequestsResource) Update(c buffalo.Context) error {
	current_user := c.Value("current_user").(*models.User)
	if !current_user.IsAdmin && !current_user.IsAgent {
		c.Flash().Add("danger", "You don't have access to that!")
		return c.Render(404, r.HTML("index.html"))
	}
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty ShowRequest
	showRequest := &models.ShowRequest{}

	if err := tx.Eager().Find(showRequest, c.Param("show_request_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind ShowRequest to the html form elements
	if err := c.Bind(showRequest); err != nil {
		return errors.WithStack(err)
	}

	if !current_user.IsAdmin && current_user.IsAgent && showRequest.Listing.ListerID != current_user.ID {
		return c.Error(404, errors.New("You do not have permissions to do this."))
	}

	verrs, err := tx.ValidateAndUpdate(showRequest)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, showRequest))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "ShowRequest was updated successfully")

	// and redirect to the show_requests index page
	return c.Render(200, r.Auto(c, showRequest))
}

// Destroy deletes a ShowRequest from the DB. This function is mapped
// to the path DELETE /show_requests/{show_request_id}
func (v ShowRequestsResource) Destroy(c buffalo.Context) error {
	current_user := c.Value("current_user").(*models.User)
	if !current_user.IsAdmin && !current_user.IsAgent {
		c.Flash().Add("danger", "You don't have access to that!")
		return c.Render(404, r.HTML("index.html"))
	}
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty ShowRequest
	showRequest := &models.ShowRequest{}

	// To find the ShowRequest the parameter show_request_id is used.
	if err := tx.Eager().Find(showRequest, c.Param("show_request_id")); err != nil {
		return c.Error(404, err)
	}

	if !current_user.IsAdmin && current_user.IsAgent && showRequest.Listing.ListerID != current_user.ID {
		return c.Error(404, errors.New("You do not have permissions to do this."))
	}

	if err := tx.Destroy(showRequest); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "ShowRequest was destroyed successfully")

	// Redirect to the show_requests index page
	return c.Render(200, r.Auto(c, showRequest))
}
