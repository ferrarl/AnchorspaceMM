package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
	"mmgitl.mattclark.guru/Anchorspace/dashboard/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Neighborhood)
// DB Table: Plural (neighborhoods)
// Resource: Plural (Neighborhoods)
// Path: Plural (/neighborhoods)
// View Template Folder: Plural (/templates/neighborhoods/)

// NeighborhoodsResource is the resource for the Neighborhood model
type NeighborhoodsResource struct {
	buffalo.Resource
}

// List gets all Neighborhoods. This function is mapped to the path
// GET /neighborhoods
func (v NeighborhoodsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	neighborhoods := &models.Neighborhoods{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Neighborhoods from the DB
	if err := q.All(neighborhoods); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, neighborhoods))
}

// Show gets the data for one Neighborhood. This function is mapped to
// the path GET /neighborhoods/{neighborhood_id}
func (v NeighborhoodsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Neighborhood
	neighborhood := &models.Neighborhood{}

	// To find the Neighborhood the parameter neighborhood_id is used.
	if err := tx.Find(neighborhood, c.Param("neighborhood_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, neighborhood))
}

// New renders the form for creating a new Neighborhood.
// This function is mapped to the path GET /neighborhoods/new
func (v NeighborhoodsResource) New(c buffalo.Context) error {
	current_user := c.Value("current_user").(*models.User)
	if !current_user.IsAdmin {
		c.Flash().Add("danger", "You don't have access to that!")
		return c.Render(404, r.HTML("index.html"))
	}

	return c.Render(200, r.Auto(c, &models.Neighborhood{}))
}

// Create adds a Neighborhood to the DB. This function is mapped to the
// path POST /neighborhoods
func (v NeighborhoodsResource) Create(c buffalo.Context) error {
	current_user := c.Value("current_user").(*models.User)
	if !current_user.IsAdmin {
		c.Flash().Add("danger", "You don't have access to that!")
		return c.Render(404, r.HTML("index.html"))
	}

	// Allocate an empty Neighborhood
	neighborhood := &models.Neighborhood{}

	// Bind neighborhood to the html form elements
	if err := c.Bind(neighborhood); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(neighborhood)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, neighborhood))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Neighborhood was created successfully")

	// and redirect to the neighborhoods index page
	return c.Render(201, r.Auto(c, neighborhood))
}

// Edit renders a edit form for a Neighborhood. This function is
// mapped to the path GET /neighborhoods/{neighborhood_id}/edit
func (v NeighborhoodsResource) Edit(c buffalo.Context) error {
	current_user := c.Value("current_user").(*models.User)
	if !current_user.IsAdmin {
		c.Flash().Add("danger", "You don't have access to that!")
		return c.Render(404, r.HTML("index.html"))
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Neighborhood
	neighborhood := &models.Neighborhood{}

	if err := tx.Find(neighborhood, c.Param("neighborhood_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, neighborhood))
}

// Update changes a Neighborhood in the DB. This function is mapped to
// the path PUT /neighborhoods/{neighborhood_id}
func (v NeighborhoodsResource) Update(c buffalo.Context) error {
	current_user := c.Value("current_user").(*models.User)
	if !current_user.IsAdmin {
		c.Flash().Add("danger", "You don't have access to that!")
		return c.Render(404, r.HTML("index.html"))
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Neighborhood
	neighborhood := &models.Neighborhood{}

	if err := tx.Find(neighborhood, c.Param("neighborhood_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Neighborhood to the html form elements
	if err := c.Bind(neighborhood); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(neighborhood)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, neighborhood))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Neighborhood was updated successfully")

	// and redirect to the neighborhoods index page
	return c.Render(200, r.Auto(c, neighborhood))
}

// Destroy deletes a Neighborhood from the DB. This function is mapped
// to the path DELETE /neighborhoods/{neighborhood_id}
func (v NeighborhoodsResource) Destroy(c buffalo.Context) error {
	current_user := c.Value("current_user").(*models.User)
	if !current_user.IsAdmin {
		c.Flash().Add("danger", "You don't have access to that!")
		return c.Render(404, r.HTML("index.html"))
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Neighborhood
	neighborhood := &models.Neighborhood{}

	// To find the Neighborhood the parameter neighborhood_id is used.
	if err := tx.Find(neighborhood, c.Param("neighborhood_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(neighborhood); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Neighborhood was destroyed successfully")

	// Redirect to the neighborhoods index page
	return c.Render(200, r.Auto(c, neighborhood))
}
